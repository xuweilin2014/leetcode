package xu.dp.solution;

public class Solution1024 {
    /*
     * 视频拼接，动态规划解法如下：
     * 令 dp[i] 表示剪辑一个时间为 [0...i] 的视频所需要的最少视频数目，动态转移方程如下：
     * 我们可以枚举所有的子区间来依次计算出所有的 dp 值。我们首先枚举 i，同时对于任意一个子区间 [aj,bj)
     * 若其满足 aj < i <= bj，那么它就可以覆盖区间 [0,i) 的后半部分，而前半部分则可以用 dp[aj]
     * 对应的最优方法进行覆盖，对应的状态转移方程如下：
     *
     * dp[i] = min{dp[aj] + 1, dp[i]} , aj < i <= bj
     */
}
