package xu.union_find.solutions;

public class Solution130 {

    /*
     * 被围绕的区域
     *
     * 并查集这种数据结构好像大家不太常用，实际上很有用，我在实际的 production code 中用过并查集。并查集常用来解决连通性的问题，
     * 即将一个图中连通的部分划分出来。当我们判断图中两个点之间是否存在路径时，就可以根据判断他们是否在一个连通区域。 而这道题我们其实求
     * 解的就是和边界的 'O' 在一个连通区域的的问题。
     *
     * 我们的思路是把所有边界上的 OO 看做一个连通区域。遇到 OO 就执行并查集合并操作，这样所有的 OO 就会被分成两类
     *
     * 1.和边界上的 OO 在一个连通区域内的。这些 OO 我们保留。
     * 2.不和边界上的 OO 在一个连通区域内的。这些 OO 就是被包围的，替换。
     */

}
